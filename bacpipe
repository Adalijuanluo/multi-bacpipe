#!/bin/bash 

## This is the master script for the bacterial RNA-seq processing pipeline. 
## It reports the master log, determines if it's OK to proceed, and calls all the sub-scripts. 
## Computationally challenging tasks are parallelized; Parallel wrappers 
## are named mbc_prun_*.sh. These in turn call onto individual scripts. 

GRN='\033[1;32m'
BL='\033[0;34m'
NC='\033[0m' # No Color

if [[ $# < 3 ]] 
then
  echo
  echo "Process the data using pre-created reference."
  echo "====================================================" 
  printf "Usage: ${GRN}bacpipe${NC} ${BL}<ref_dir> <-m config>${NC} [-p CPUs]\n"
  echo "       (for multi-strain experiment processing)" 
  echo "       - or - " 
  printf "Usage: ${GRN}bacpipe${NC} ${BL}<ref_dir> <-s strain_tag>${NC} [-p CPUs]\n" 
  echo "       (for single strain experiment processing)"
  echo 
  echo "See github.com/apredeus/bacpipe for more information."
  echo 
  exit 1
fi

CONFIG=""
STRAIN=""
CPUS="" 
PARAMS=""

while (( "$#" )); do
  case "$1" in
    -m)
      CONFIG=$2
      shift 2
      if [[ $CONFIG == "" ]]
      then
        echo "ERROR: -m flag requires a non-empty argument (config file)!" 
        exit 1 
      fi
      echo "===> Option -m activated; experiment will be processed as multi-strain, config file is $CONFIG."
      ;;  
    -s)
      STRAIN=$2
      shift 2
      if [[ $STRAIN == "" ]]
      then
        echo "ERROR: -s flag requires a non-empty argument (strain tag)!" 
        exit 1 
      fi
      echo "===> Invoking -s option: experiment will be processed as single-strain, strain tag is $STRAIN."
      ;;  
    -p)
      CPUS=$2
      shift 2
      if [[ $CPUS == "" ]]
      then
        echo "ERROR: -p flag requires a non-empty argument (number of CPUs)!" 
        exit 1 
      fi
      echo "===> Invoking -p option: parallel jobs will be run on $CPUS cores."
      ;;  
    --) # end argument parsing
      shift
      break
      ;;  
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;  
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;  
  esac
done
eval set -- "$PARAMS"

REFDIR=$1

## TODO some sanity checks, dem old ones dont work no more

if [[ $REFDIR == "" ]]
then
  echo "ERROR: Reference directory must be specified!" 
fi  

if [[ $CPUS == "" ]]
then 
  echo "===> Parallel jobs will be ran on 16 cores (default)."
  CPUS=16
fi


############################################################

set -euo pipefail

echo "=================================================================================="
echo "=================================================================================="
echo "===                                                                            ==="
echo "===                             Welcome to BACPIPE!                            ==="
echo "===                       v0.2 - with multi-strain support                     ==="
echo "===            2018  (c)  Alexander Predeus, Jay Hinton Lab, Liverpool         ==="
echo "===  For more information, please visit https://github.com/apredeus/bacpipe    ==="
echo "===                          Publication in preparation.                       ==="
echo "===                                                                            ==="
echo "=================================================================================="
echo "=================================================================================="
echo
echo


WDIR=`pwd`
cd $WDIR 
REFDIR=`readlink -f $REFDIR`
CONFIG=`readlink -f $CONFIG`

echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 0: Checking configuration file and reference availability."
echo 
cd $WDIR 
mbc_check_config.sh $WDIR $REFDIR $CONFIG
echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 1: Running FastQC."
echo
cd $WDIR/fastqs
mbc_prun_fastqc.sh $WDIR $CPUS
echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 2: Running STAR alignment."
echo
cd $WDIR/fastqs 
mbc_prun_star.sh $WDIR $REFDIR $CONFIG $CPUS
echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 3: Making TDF and strand-specific bigWig files." 
echo
cd $WDIR/bams 
mbc_prun_coverage.sh $WDIR $REFDIR $CONFIG $CPUS
echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 4: Running featureCounts on all possible strand settings."
echo 
cd $WDIR/bams 
mbc_prun_strand.sh $WDIR $REFDIR $CONFIG $CPUS
echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 5: Calculating strandedness and other statistics."
echo 
cd $WDIR/fastqs 
mbc_prun_stats.sh $WDIR $CONFIG $CPUS
echo 
echo "=================================================================================="
echo

cd $WDIR/stats
cat *.strand | awk 'BEGIN {min=100;max=0} {sum+=$16; if($16>max) \
{max=$16}; if($16<min) {min=$16};} END {print "Average percent of \
reads matching the coding strand: "sum/NR", lowest: "min", highest: "max}'

STRAND=`cat *.strand | awk '{sum+=$16} END {x=sum/NR; if (x<10) \
{print "RF"} else if (x>90) {print "FR"} else if (x>45 && x<55) \
{print "NONE"} else {print "ERROR"}}'` 

if [[ $STRAND == "ERROR" ]]
then
  echo "ERROR: something is very much off with the strand-specificity of your RNA-seq!"
  exit 1
else 
  echo "The strandedness of your experiment was determined to be $STRAND"
fi
cd $WDIR

echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 6: Selecting the appropriate quantification approach."
echo 
cd $WDIR/bams 
mbc_prun_fcount.sh $WDIR $REFDIR $CONFIG $CPUS $STRAND
echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 7: Making final expression tables."
echo 
cd $WDIR/featureCounts 
mbc_make_tables.sh $WDIR $REFDIR $CONFIG
echo 
echo "=================================================================================="
echo


echo "==> ["`date +%H:%M:%S`"] ALL YOUR BASES ARE BELONG TO US!!!"
