#!/bin/bash 

## This is the master script for the bacterial RNA-seq processing pipeline. 
## It reports the master log, determines if it's OK to proceed, and calls all the sub-scripts. 
## Computationally challenging tasks are parallelized; Parallel wrappers 
## are named mbc_prun_*.sh. These in turn call onto individual scripts. 

GRN='\033[1;32m'
GRN2='\033[0;32m'
UL='\033[4;34m'
NC='\033[0m' # No Color

if [[ $# < 3 ]] 
then
  echo
  echo "Version:"
  echo "  v.0.2.1, Alexander Predeus (predeus@gmail.com), 2018" 
  echo "Synopsis:"
  echo "  Process multistrain bacterial RNA-seq data using pre-created reference"
  echo "Usage:" 
  printf "  ${GRN}multi-bacpipe${NC} ${GRN2}<working_directory> <config> [-p CPUs] [-k key_strain]${NC}\n"
  echo 
  echo "Positional arguments:"
  echo "  <ref_dir>      Directory with all the refence sub-directories"
  echo "  <config>       Tab-separated file listing each sample and strain tag," 
  echo "                 as well as reference strain tags" 
  echo "Options:"
  echo "  -p [X]         Number of cores for parallel execution (default '16')"
  echo "  -k [X]         Key strain: use strain's locus tag when no gene name is assigned"
  echo  
  printf "See ${UL}github.com/apredeus/multi-bacpipe${NC} for more information.\n"
  echo 
  exit 1
fi

echo "=================================================================================="
echo "=================================================================================="
echo "===                                                                            ==="
echo "===                             Welcome to BACPIPE!                            ==="
echo "===                       v0.2 - with multi-strain support                     ==="
echo "===            2018  (c)  Alexander Predeus, Jay Hinton Lab, Liverpool         ==="
echo "===  For more information, please visit https://github.com/apredeus/bacpipe    ==="
echo "===                          Publication in preparation.                       ==="
echo "===                                                                            ==="
echo "=================================================================================="
echo "=================================================================================="
echo
echo

CPUS=""
KEYSTR="" 
PARAMS=""



while (( "$#" )); do
  case "$1" in
    -k)
      KEYSTR=$2
      shift 2
      if [[ $KEYSTR == "" ]]
      then
        echo "ERROR: -k flag requires a non-empty argument (Key strain ID)!" 
        exit 1 
      fi
      echo "==> Invoking -k option: locus tags from key strain $KEYSTR will be used when common names are absent."
      ;;  
    -p)
      CPUS=$2
      shift 2
      if [[ $CPUS == "" ]]
      then
        echo "ERROR: -p flag requires a non-empty argument (number of CPUs)!" 
        exit 1 
      fi
      echo "==> Invoking -p option: parallel jobs will be run on $CPUS cores."
      ;;  
    --) # end argument parsing
      shift
      break
      ;;  
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;  
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;  
  esac
done
eval set -- "$PARAMS"

WDIR=$1
CONFIG=$2

## replace simplified path with full path 
WDIR=`readlink -f $WDIR`
CONFIG=`readlink -f $CONFIG`
REFDIR=$WDIR/study_strains

if [[ $WDIR == "" || $CONFIG == "" || ! -d $REFDIR || ! "$(ls -A $REFDIR)" ]]
then
  echo "ERROR: You must specify a non-empty reference directory and config file!"
  exit 1  
fi  

if [[ $CPUS == "" ]]
then 
  echo "==> Parallel jobs will be ran on 16 cores (default)."
  CPUS=16
fi

############################################################

set -euo pipefail

cd $WDIR 

echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 0: Checking configuration file and reference availability."
echo 
cd $WDIR
#TODO: this now fails if you don't delete all of the generated dirs; optimize behaviour  
mbc_check_config.sh $WDIR $REFDIR $CONFIG
echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 1: Running FastQC."
echo
cd $WDIR/fastqs
mbc_prun_fastqc.sh $WDIR $CPUS
echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 2: Running STAR alignment."
echo
cd $WDIR/fastqs 
mbc_prun_star.sh $WDIR $REFDIR $CONFIG $CPUS
echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 3: Making TDF and strand-specific bigWig files." 
echo
cd $WDIR/bams 
mbc_prun_coverage.sh $WDIR $REFDIR $CONFIG $CPUS
echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 4: Running featureCounts on all possible strand settings."
echo 
cd $WDIR/bams 
mbc_prun_strand.sh $WDIR $REFDIR $CONFIG $CPUS
echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 5: Calculating strandedness and other statistics."
echo 
cd $WDIR/fastqs 
mbc_prun_stats.sh $WDIR $CONFIG $CPUS
echo 
echo "=================================================================================="
echo

cd $WDIR/stats
cat *.strand | awk 'BEGIN {min=100;max=0} {sum+=$16; if($16>max) \
{max=$16}; if($16<min) {min=$16};} END {print "Average percent of \
reads matching the coding strand: "sum/NR", lowest: "min", highest: "max}'

STRAND=`cat *.strand | awk '{sum+=$16} END {x=sum/NR; if (x<10) \
{print "RF"} else if (x>90) {print "FR"} else if (x>45 && x<55) \
{print "NONE"} else {print "ERROR"}}'` 

if [[ $STRAND == "ERROR" ]]
then
  echo "ERROR: something is very much off with the strand-specificity of your RNA-seq!"
  exit 1
else 
  echo "The strandedness of your experiment was determined to be $STRAND"
fi
cd $WDIR

echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 6: Selecting the appropriate quantification approach."
echo 
cd $WDIR/bams 
mbc_prun_fcount.sh $WDIR $REFDIR $CONFIG $CPUS $STRAND
echo 
echo "=================================================================================="
echo

echo "==> ["`date +%H:%M:%S`"] Step 7: Making final expression tables."
echo 
cd $WDIR/featureCounts 
mbc_make_tables.sh $WDIR $CONFIG $KEYSTR
echo 
echo "=================================================================================="
echo

## TODO: multiQC with appropriately formatted json!

echo "==> ["`date +%H:%M:%S`"] ALL YOUR BASES ARE BELONG TO US!!!"
